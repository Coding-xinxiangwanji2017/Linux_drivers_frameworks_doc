1. struct snd_card
    
1.1 snd_card是什么

snd_card可以说是整个ALSA音频驱动最顶层的一个结构,
整个声卡的软件逻辑结构开始于该结构,几乎所有与声音相关的逻辑设备都是在snd_card的管理之下,声卡驱动的第一个动作，通常就是创建一个snd_card结构体。

    struct list_head devices     记录该声卡下所有逻辑设备的链表
    struct list_head controls    记录该声卡下所有的控制单元的链表
    void *private_data            声卡的私有数据,可以在创建声卡时通过参数指定数据的大小


2. 声卡的建立流程
2.1 创建snd_card的一个实例


1 struct snd_card *card;
2 int err;
3 ....
4 err = snd_card_create(index, id, THIS_MODULE, 0, &card);

    index           一个整数值,该声卡的编号
    id                字符串,声卡的标识符
    第四个参数    该参数决定在创建snd_card实例时,需要同时额外分配的私有数据的大小,该数据的指针最终会赋值给snd_card的private_data数据成员
    card             返回所创建的snd_card实例的指针


2.2 创建声卡的芯片专用数据
声卡的专用数据主要用于存放该声卡的一些资源信息,例如中断资源、io资源、dma资源等.可以有两种创建方法:

    通过上一步中snd_card_create()中的第四个参数,让snd_card_create自己创建
    or
    自己创建: ...
   
2.3 设置Driver的ID和名字

    1 strcpy(card->driver, "My Chip");
    2 strcpy(card->shortname, "My Own Chip 123");
    3 sprintf(card->longname, "%s at 0x%lx irq %i", card->shortname, chip->ioport, chip->irq);

    snd_card的driver字段保存着芯片的ID字符串,user空间的alsa-lib会使用到该字符串,所以必须要保证该ID的唯一性.
    shortname字段更多地用于打印信息,
    longname字段则会出现在/proc/asound/cards中.
    
    
2.4 创建声卡的功能部件(逻辑设备),例如PCM,Mixer,MIDI等
这时候可以创建声卡的各种功能部件了,还记得开头的snd_card结构体的devices字段吗?每一种部件的创建最终会调用snd_device_new()来生成一个snd_device实例,并把该实例链接到snd_card的devices链表中.

通常,alsa-driver的已经提供了一些常用的部件的创建函数,而不必直接调用snd_device_new(),如下:

--------------------------------------------------------------------------------------------------------------
总结
--------------------------------------------------------------------------------------------------------------
snd_card_create()
        snd_pcm_new()
              snd_pcm_new_stream(playback)
              snd_pcm_new_stream(capture)
              snd_device_new(SNDRV_DEV_PCM, &ops)
     
snd_pcm_set_ops(&my_pcm_ops)

snd_card_register()
        snd_device_register_all()
              snd_pcm_dev_register()
     
     
     

snd_card_create　　由于pcm是声卡下的一个设备(部件),所以第一步是要先创建一个声卡。
                  snd_pcm_new　　    调用该api创建一个pcm,才该api中会做以下事情
                                        如果有,建立playback stream,相应的substream也同时建立
                                        如果有,建立capture stream,相应的substream也同时建立
                                        调用snd_device_new()把该pcm挂到声卡中,参数ops中的dev_register字段指向了函数snd_pcm_dev_register,
                                        这个回调函数会在声卡的注册阶段被call.
snd_pcm_set_ops　　设置操作该pcm的控制/操作接口函数,参数中的snd_pcm_ops结构中的函数通常就是我们驱动要实现的函数
snd_card_register　注册声卡,在这个阶段会遍历声卡下的所有逻辑设备（devices list）,并且调用各设备的注册回调函数,
                   对于pcm,就是第二步提到的snd_pcm_dev_register函数,该回调函数就建立上了和用户空间应用程序(alsa-lib)通信所用的设备文件节点:
                   /dev/snd/pcmCxxDxxp 和 /dev/snd/pcmCxxDxxc



--------------------------------------------------------------------------------------------------------------
PCM
-------------------------------------------------------------------------------------------------------------
PCM是英文Pulse-code modulation的缩写,中文译名是脉冲编码调制.
人耳听到的声音是模拟信号,PCM就是要把声音从模拟转换成数字信号的一种技术,
他的原理简单地说就是利用一个固定的频率对模拟信号进行采样,采样后的信号在波形上看就像一串连续的幅值不一的脉冲,把这些脉冲的幅值按一定的精度进行量化,
这些量化后的数值被连续地输出、传输、处理或记录到存储介质中,所有这些组成了数字音频的产生过程.

PCM信号的两个重要指标是采样频率和量化精度,目前,CD音频的采样频率通常为44100Hz,量化精度是16bit.通常,播放音乐时,
应用程序从存储介质中读取音频数据(MP3、WMA、AAC......),经过解码后,最终送到音频驱动程序中的就是PCM数据,
反过来,在录音时,音频驱动不停地把采样所得的PCM数据送回给应用程序,由应用程序完成压缩、存储等任务.所以,音频驱动的两大核心任务就是:

    playback    如何把用户空间的应用程序发过来的PCM数据,转化为人耳可以辨别的模拟音频
    capture     把mic拾取到得模拟信号,经过采样、量化,转换为PCM信号送回给用户空间的应用程序


snd_pcm是挂在snd_card下面的一个snd_device
snd_pcm中的字段:streams[2],该数组中的两个元素指向两个snd_pcm_str结构,分别代表playback stream和capture stream
snd_pcm_str中的substream字段,指向snd_pcm_substream结构，

snd_pcm_substream是pcm中间层的核心,绝大部分任务都是在substream中处理,
尤其是他的ops(snd_pcm_ops)字段,许多user空间的应用程序通过alsa-lib对驱动程序的请求都是由该结构中的函数处理.
snd_pcm_substream的runtime字段则指向snd_pcm_runtime结构,snd_pcm_runtime记录着substream的一些重要的软件和硬件运行环境和参数.

/////////////////////////////////////////////
[设备文件节点的建立] (dev/snd/pcmCxDxp、pcmCxDxc)
/////////////////////////////////////////////
1. struct snd_minor
结构体保存了声卡下某个逻辑设备的上下文信息,他在逻辑设备建立阶段被填充,在逻辑设备被使用时就可以从该结构体中得到相应的信息.pcm设备也不例外,也需要使用该结构体:
                1 struct snd_minor {
                2     int type;            /* SNDRV_DEVICE_TYPE_XXX */
                3     int card;            /* card number */
                4     int device;          /* device number */
                5     const struct file_operations *f_ops;    /* file operations */
                6     void *private_data;        /* private data for f_ops->open */
                7     struct device *dev;        /* device for sysfs */
                8 };

在sound/sound.c中定义了一个snd_minor指针的全局数组:    static struct snd_minor *snd_minors[256];
    前面说过,在声卡的注册阶段(snd_card_register),会调用pcm的回调函数snd_pcm_dev_register(),这个函数里会调用
    函数snd_register_device_for_dev():
    
           static int snd_pcm_dev_register(struct snd_device *device)
         2 {
         3     ......
         4 
         5     /* register pcm */
         6     err = snd_register_device_for_dev(devtype, pcm->card,
         7                          pcm->device,
         8                     &snd_pcm_f_ops[cidx],
         9                     pcm, str, dev);
        10     ......
        11 }
    
        再进入snd_register_device_for_dev():
                 ....
                 struct snd_minor *preg;
                 preg = kmalloc(sizeof *preg, GFP_KERNEL);
                 ....
                 snd_minors[minor] = preg;
                 preg->dev = device_create(sound_class, device, MKDEV(major, minor), private_data, "%s", name);
     
     
1. struct snd_minor 总结：           
         
    首先,分配并初始化一个snd_minor结构中的各字段
        type: SNDRV_DEVICE_TYPE_PCM_PLAYBACK/SNDRV_DEVICE_TYPE_PCM_CAPTURE
        card: card的编号
        device: pcm实例的编号，大多数情况为0
        f_ops: snd_pcm_f_ops
        private_data: 指向该pcm的实例
    根据type,card和pcm的编号,确定数组的索引值minor,minor也作为pcm设备的此设备号
    把该snd_minor结构的地址放入全局数组snd_minors[minor]中
    最后,调用device_create创建设备节点

 在struct snd_minor的最后,设备文件已经建立,不过它是重点在于snd_minors数组的赋值过程,
 
 
 下面把重点放在设备文件中：  
        回到pcm的回调函数snd_pcm_dev_register()中:
        static int snd_pcm_dev_register(struct snd_device *device)
        {
            int cidx, err;
            char str[16];
            struct snd_pcm *pcm;
            struct device *dev;

            pcm = device->device_data;
                 ......
            for (cidx = 0; cidx < 2; cidx++) {
                          ......
                switch (cidx) {
                case SNDRV_PCM_STREAM_PLAYBACK:
                    sprintf(str, "pcmC%iD%ip", pcm->card->number, pcm->device);
                    devtype = SNDRV_DEVICE_TYPE_PCM_PLAYBACK;
                    break;
                case SNDRV_PCM_STREAM_CAPTURE:
                    sprintf(str, "pcmC%iD%ic", pcm->card->number, pcm->device);
                    devtype = SNDRV_DEVICE_TYPE_PCM_CAPTURE;
                    break;
                }
                /* device pointer to use, pcm->dev takes precedence if
                 * it is assigned, otherwise fall back to card's device
                 * if possible */
                dev = pcm->dev;
                if (!dev)
                    dev = snd_card_get_device_link(pcm->card);
                /* register pcm */
                err = snd_register_device_for_dev(devtype, pcm->card,
                                  pcm->device,
                                  &snd_pcm_f_ops[cidx],
                                  pcm, str, dev);
                          ......
            }
                 ......
        }
        
 可以看出,对于一个pcm设备,可以生成两个设备文件,一个用于playback,一个用于capture,代码中也确定了他们的命名规则:

    playback  --  pcmCxDxp,通常系统中只有一各声卡和一个pcm,它就是pcmC0D0p
    capture  --  pcmCxDxc,通常系统中只有一各声卡和一个pcm,它就是pcmC0D0c

snd_pcm_f_ops

snd_pcm_f_ops是一个标准的文件系统file_operations结构数组,它的定义在sound/core/pcm_native.c中:      

            const struct file_operations snd_pcm_f_ops[2] = {
                {
                    .owner =        THIS_MODULE,
                    .write =        snd_pcm_write,
                    .aio_write =        snd_pcm_aio_write,
                    .open =            snd_pcm_playback_open,
                    .release =        snd_pcm_release,
                    .llseek =        no_llseek,
                    .poll =            snd_pcm_playback_poll,
                    .unlocked_ioctl =    snd_pcm_playback_ioctl,
                    .compat_ioctl =     snd_pcm_ioctl_compat,
                    .mmap =            snd_pcm_mmap,
                    .fasync =        snd_pcm_fasync,
                    .get_unmapped_area =    snd_pcm_get_unmapped_area,
                },
                {
                    .owner =        THIS_MODULE,
                    .read =            snd_pcm_read,
                    .aio_read =        snd_pcm_aio_read,
                    .open =            snd_pcm_capture_open,
                    .release =        snd_pcm_release,
                    .llseek =        no_llseek,
                    .poll =            snd_pcm_capture_poll,
                    .unlocked_ioctl =    snd_pcm_capture_ioctl,
                    .compat_ioctl =     snd_pcm_ioctl_compat,
                    .mmap =            snd_pcm_mmap,
                    .fasync =        snd_pcm_fasync,
                    .get_unmapped_area =    snd_pcm_get_unmapped_area,
                }
            };
            
            snd_pcm_f_ops作为snd_register_device_for_dev的参数被传入,并被记录在snd_minors[minor]中的字段f_ops中.
            最后,在snd_register_device_for_dev中创建设备节点:
             snd_minors[minor] = preg;
             preg->dev = device_create(sound_class, device, MKDEV(major, minor), private_data, "%s", name);

   创建节点之后,就能在/dev目录下查看到相应的设备文件.
   
   
   
   
   
   
   
   
   
   ---------------------------------------------------------------------------------------
   从应用程序到驱动层pcm  (字符设备驱动的 老流成了)
   ---------------------------------------------------------------------------------------
   在sound/core/sound.c中有alsa_sound_init()函数,定义如下: 
   
           static int __init alsa_sound_init(void)
            {
                snd_major = major;
                snd_ecards_limit = cards_limit;
                if (register_chrdev(major, "alsa", &snd_fops)) {
                    snd_printk(KERN_ERR "unable to register native major device number %d/n", major);
                    return -EIO;
                }
                if (snd_info_init() < 0) {
                    unregister_chrdev(major, "alsa");
                    return -ENOMEM;
                }
                snd_info_minor_register();
                return 0;
            }
   register_chrdev中的参数major与之前创建pcm设备是device_create时的major是同一个,这样的结果是,当应用程序open设备文件/dev/snd/pcmCxDxp时,会进入snd_fops的open回调函数,我们将在下一节中讲述open的过程.
   
   
   
   
   
打开pcm设备:
   open一个pcm设备时,将会调用snd_fops的open回调函数,我们先看看snd_fops的定义:

            1 static const struct file_operations snd_fops =
            2 {
            3     .owner =    THIS_MODULE,
            4     .open =        snd_open
            5 };
            它首先从inode中取出此设备号,然后以次设备号为索引,从snd_minors全局数组中取出当初注册pcm设备时填充的snd_minor结构
            (上面的 struct snd_minor内容),
            然后从snd_minor结构中取出pcm设备的f_ops,并且把file->f_op替换为pcm设备的f_ops,紧接着直接调用pcm设备的f_ops->open(),
            然后返回.
            因为file->f_op已经被替换,以后,应用程序的所有read/write/ioctl调用都会进入pcm设备自己的回调函数中,也就是[设备文件的建立]提到的snd_pcm_f_ops结构中定义的回调.
            


------------------------------------------------------------------------------------------
Control Interface
------------------------------------------------------------------------------------------
Control接口主要让用户空间的应用程序(alsa-lib)可以访问和控制音频codec芯片中的多路开关,滑动控件等.
对于Mixer(混音)来说,Control接口显得尤为重要,从ALSA 0.9.x版本开始,所有的mixer工作都是通过control接口的API来实现的.

ALSA已经为AC97定义了完整的控制接口模型,如果你的Codec芯片只支持AC97接口,可以忽略这部分内容。


Controls的定义：
    要自定义一个Control,首先要定义3回调函数: info, get, put. 然后定义一个 snd_kcontrol_new 结构:
    
                static struct   snd_kcontrol_new     my_control  = {
                .iface = SNDRV_CTL_ELEM_IFACE_MIXER,
                .name = "PCM Playback Switch",
                .index = 0,
                .access = SNDRV_CTL_ELEM_ACCESS_READWRITE,
                .private_value = 0xffff,
                .info = my_control_info,        //
                .get = my_control_get,          //
                .put = my_control_put           //
            };
            
            
            iface字段指出了control的类型,alsa定义了几种类型(SNDDRV_CTL_ELEM_IFACE_XXX),常用的类型是MIXER,
                当然也可以定义属于全局的CARD类型,也可以定义属于某类设备的类型,例如HWDEP,PCMRAWMIDI,TIMER等,
                这时需要在device和subdevice字段中指出卡的设备逻辑编号.

            name字段是该control的名字,从ALSA 0.9.x开始,control的名字是变得比较重要,因为control的作用是按名字来归类的.
            ALSA已经预定义了一些control的名字,我们再Control Name一节详细讨论.

            index字段用于保存该control的在该卡中的编号.如果声卡中有不止一个codec,每个codec中有相同名字的control,
            这时我们可以通过index来区分这些controls.当index为0时,则可以忽略这种区分策略.

            access字段包含了该control的访问类型.每一个bit代表一种访问类型,这些访问类型可以多个“或”运算组合在一起.

            private_value字段包含了一个任意的长整数类型值.该值可以通过info,get,put这几个回调函数访问.
            你可以自己决定如何使用该字段,例如可以把它拆分成多个位域,又或者是一个指针,指向某一个数据结构.

            tlv字段为该control提供元数据.
            
            
            
Control的名字:

control的名字需要遵循一些标准,通常可以分成3部分来定义control的名字:  源--方向--功能.

    源　　可以理解为该control的输入端,alsa已经预定义了一些常用的源,例如：Master,PCM,CD,Line等等. 
    方向　代表该control的数据流向,例如：Playback,Capture,Bypass,Bypass Capture等等,也可以不定义方向,
                    这时表示该Control是双向的(playback和capture).
    功能　根据control的功能,可以是以下字符串：Switch,Volume,Route等等

 也有一些命名上的特例:

    全局的capture和playback    "Capture Source","Capture Volume","Capture Switch",它们用于全局的capture source,switch和volume.
    同理,"Playback Volume","Playback Switch",它们用于全局的输出switch和volume.
    
    Tone-controles    音调控制的开关和音量命名为:Tone Control - XXX,例如,"Tone Control - Switch","Tone Control - Bass","Tone Control - Center".
    3D controls    3D控件的命名规则:,"3D Control - Switch","3D Control - Center","3D Control - Space".
    Mic boost    麦克风音量加强控件命名为:"Mic Boost"或"Mic Boost(6dB)".



访问标志(ACCESS Flags):
Access字段是一个bitmask,它保存了改control的访问类型.默认的访问类型是:SNDDRV_CTL_ELEM_ACCESS_READWRITE,表明该control支持读和写操作.如果access字段没有定义(.access==0),此时也认为是READWRITE类型.

如果是一个只读control,access应该设置为:SNDDRV_CTL_ELEM_ACCESS_READ,这时,我们不必定义put回调函数.类似地,如果是只写control,access应该设置为:SNDDRV_CTL_ELEM_ACCESS_WRITE,这时,我们不必定义get回调函数.

如果control的值会频繁地改变(例如:电平表),我们可以使用VOLATILE类型,这意味着该control会在没有通知的情况下改变,应用程序应该定时地查询该control的值.
回调函数


info回调函数:
info回调函数用于获取control的详细信息.它的主要工作就是填充通过参数传入的snd_ctl_elem_info对象,以下例子是一个具有单个元素的boolean型control的info回调:

1 static int snd_myctl_mono_info(struct snd_kcontrol *kcontrol,
2     struct snd_ctl_elem_info *uinfo)
3 {
4     uinfo->type = SNDRV_CTL_ELEM_TYPE_BOOLEAN;
5     uinfo->count = 1;
6     uinfo->value.integer.min = 0;
7     uinfo->value.integer.max = 1;
8     return 0;
9 }

type字段指出该control的值类型,值类型可以是BOOLEAN, INTEGER, ENUMERATED, BYTES,IEC958和INTEGER64之一.count字段指出了改control中包含有多少个元素单元,比如,立体声的音量control左右两个声道的音量值,它的count字段等于2.value字段是一个联合体(union),value的内容和control的类型有关.其中,boolean和integer类型是相同的.

ENUMERATED类型有些特殊.它的value需要设定一个字符串和字符串的索引,请看以下例子:

 1 static int snd_myctl_enum_info(struct snd_kcontrol *kcontrol,
 2 struct snd_ctl_elem_info *uinfo)
 3 {
 4     static char *texts[4] = {
 5         "First", "Second", "Third", "Fourth"
 6     };
 7     uinfo->type = SNDRV_CTL_ELEM_TYPE_ENUMERATED;
 8     uinfo->count = 1;
 9     uinfo->value.enumerated.items = 4;
10     if (uinfo->value.enumerated.item > 3)
11         uinfo->value.enumerated.item = 3;
12     strcpy(uinfo->value.enumerated.name,
13         texts[uinfo->value.enumerated.item]);
14     return 0;
15 }

alsa已经为我们实现了一些通用的info回调函数,例如:snd_ctl_boolean_mono_info(),snd_ctl_boolean_stereo_info()等等.


get回调函数:
该回调函数用于读取control的当前值,并返回给用户空间的应用程序.

1 static int snd_myctl_get(struct snd_kcontrol *kcontrol,
2     struct snd_ctl_elem_value *ucontrol)
3 {
4     struct mychip *chip = snd_kcontrol_chip(kcontrol);
5     ucontrol->value.integer.value[0] = get_some_value(chip);
6     return 0;
7 }

value字段的赋值依赖于control的类型(如同info回调).很多声卡的驱动利用它存储硬件寄存器的地址、bit-shift和bit-mask,这时,private_value字段可以按以下例子进行设置:

1 private_value = reg | (shift << 16) | (mask << 24);

然后,get回调函数可以这样实现:

 1 static int snd_sbmixer_get_single(struct snd_kcontrol *kcontrol,
 2     struct snd_ctl_elem_value *ucontrol)
 3 
 4 {
 5     int reg = kcontrol->private_value & 0xff;
 6     int shift = (kcontrol->private_value >> 16) & 0xff;
 7     int mask = (kcontrol->private_value >> 24) & 0xff;
 8     ....
 9 
10     //根据以上的值读取相应寄存器的值并填入value中
11 }

如果control的count字段大于1,表示control有多个元素单元,get回调函数也应该为value填充多个数值 


put回调函数:
put回调函数用于把应用程序的控制值设置到control中.

 1 static int snd_myctl_put(struct snd_kcontrol *kcontrol,
 2     struct snd_ctl_elem_value *ucontrol)
 3 {
 4     struct mychip *chip = snd_kcontrol_chip(kcontrol);
 5     int changed = 0;
 6     if (chip->current_value !=
 7         ucontrol->value.integer.value[0]) {
 8         change_current_value(chip,
 9         ucontrol->value.integer.value[0]);
10         changed = 1;
11     }
12     return changed;
13 }

如上述例子所示,当control的值被改变时,put回调必须要返回1,如果值没有被改变,则返回0.如果发生了错误,则返回一个负数的错误号.

和get回调一样,当control的count大于1时,put回调也要处理多个control中的元素值.
创建Controls

当把以上讨论的内容都准备好了以后,我们就可以创建我们自己的control了.alsa-driver为我们提供了两个用于创建control的API:

    snd_ctl_new1()
    snd_ctl_add()

可以用以下最简单的方式创建control:
    1 err = snd_ctl_add(card, snd_ctl_new1(&my_control, chip));
    2 if (err < 0)
    3     return err;

在这里,my_control是一个之前定义好的snd_kcontrol_new对象,chip对象将会被赋值在kcontrol->private_data字段,该字段可以在回调函数中访问.

snd_ctl_new1()会分配一个新的snd_kcontrol实例,并把my_control中相应的值复制到该实例中,所以,在定义my_control时,通常我们可以加上__devinitdata前缀.snd_ctl_add则把该control绑定到声卡对象card当中.
元数据(Metadata)

很多mixer control需要提供以dB为单位的信息,我们可以使用DECLARE_TLV_xxx宏来定义一些包含这种信息的变量,然后把control的tlv.p字段指向这些变量,
最后,在access字段中加上SNDRV_CTL_ELEM_ACCESS_TLV_READ标志,就像这样:

 1 static DECLARE_TLV_DB_SCALE(db_scale_my_control, -4050, 150, 0);
 2 
 3 
 4 static struct snd_kcontrol_new my_control __devinitdata = {
 5     ...
 6     .access = SNDRV_CTL_ELEM_ACCESS_READWRITE |
 7             SNDRV_CTL_ELEM_ACCESS_TLV_READ,
 8     ...
 9     .tlv.p = db_scale_my_control,
10 };

DECLARE_TLV_DB_SCALE宏定义的mixer control,它所代表的值按一个固定的dB值的步长变化.该宏的第一个参数是要定义变量的名字,第二个参数是最小值,以0.01dB为单位.第三个参数是变化的步长,也是以0.01dB为单位.如果该control处于最小值时会做出mute时,需要把第四个参数设为1.

DECLARE_TLV_DB_LINEAR宏定义的mixer control,它的输出随值的变化而线性变化. 该宏的第一个参数是要定义变量的名字,第二个参数是最小值,以0.01dB为单位.第二个参数是最大值,以0.01dB为单位.如果该control处于最小值时会做出mute时,需要把第二个参数设为TLV_DB_GAIN_MUTE.

这两个宏实际上就是定义一个整形数组,所谓tlv,就是Type-Lenght-Value的意思,数组的第0各元素代表数据的类型,第1个元素代表数据的长度,第三个元素和之后的元素保存该变量的数据.



Control设备的建立:
Control设备和PCM设备一样,都属于声卡下的逻辑设备.用户空间的应用程序通过alsa-lib访问该Control设备,读取或控制control的控制状态,从而达到控制音频Codec进行各种Mixer等控制操作.

Control设备的创建过程大体上和PCM设备的创建过程相同.详细的创建过程可以参考本博的另一篇文章:Linux音频驱动之三:PCM设备的创建.下面我们只讨论有区别的地方.

我们需要在我们的驱动程序初始化时主动调用snd_pcm_new()函数创建pcm设备,而control设备则在snd_card_create()内被创建,snd_card_create()通过调用snd_ctl_create()函数创建control设备节点.所以我们无需显式地创建control设备,只要建立声卡,control设备被自动地创建.

和pcm设备一样,control设备的名字遵循一定的规则:controlCxx,这里的xx代表声卡的编号.我们也可以通过代码正是这一点,下面的是snd_ctl_dev_register()函数的

 1 /*
 2  * registration of the control device
 3  */
 4 static int snd_ctl_dev_register(struct snd_device *device)
 5 {
 6     struct snd_card *card = device->device_data;
 7     int err, cardnum;
 8     char name[16];
 9 
10     if (snd_BUG_ON(!card))
11         return -ENXIO;
12     cardnum = card->number;
13     if (snd_BUG_ON(cardnum < 0 || cardnum >= SNDRV_CARDS))
14         return -ENXIO;
15         /* control设备的名字 */
16     sprintf(name, "controlC%i", cardnum);
17     if ((err = snd_register_device(SNDRV_DEVICE_TYPE_CONTROL, card, -1,
18                        &snd_ctl_f_ops, card, name)) < 0)
19         return err;
20     return 0;
21 }

snd_ctl_dev_register()函数会在snd_card_register()中,即声卡的注册阶段被调用.注册完成后,control设备的相关信息被保存在snd_minors[]数组中,用control设备的此设备号作索引,即可在snd_minors[]数组中找出相关的信息

用户程序需要打开control设备时,驱动程序通过snd_minors[]全局数组和此设备号,可以获得snd_ctl_f_ops结构中的各个回调函数,然后通过这些回调函数访问control中的信息和数据(最终会调用control的几个回调函数get,put,info).
